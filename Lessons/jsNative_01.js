// ##########################
// 1. Copy objects and arrays

const arr1 = [1, 2, 3] // -> [] -> #41

const student1 = { age: 23 } // -> {} -> #42
const student2 = { age: 23 } // -> {} -> #43

// Сравниваются не объекты а ссылки на адреса в области памяти объектов
console.log(student1 === student2); // #42 != #43 => false

// 1.1. Const в данном случае означает что присваивание "=" можно сделать только 1-н раз
// 1.2. Если это объект (object | array | func), то в переменной хранится ссылка на объект (на ячейку в памяти,
//      занимаемую этим объектом)
// 1.3. В фигурных скобках содержится не объект, а литерал объекта (инструкция интерпретатору для создания объекта).
//      Сам объект хранится в оперативной памяти.
// 1.4. Const не накладывает ограничения на модификацию объекта

const student3 = student1 // Создается новая переменная с такойже ссылкой на область памяти, в которой хранится
                          // student1. !Не создается новый объект!

student3.age = 24

console.log(student1); // Используюя ссылку student3 данные в объекте, который является общим и для ссылки student1
console.log(student1 === student3); // #42 === #42 => true

// #################################################################
// Копирование (клонирование) объекта с помощю спред оператора "..."
const student4 = {...student1} // -> {} -> #44
console.log(student1 === student4); // #42 != #44 => false

// Копирование (клонирование) массива с помощю спред оператора "..."
const arr2 = [...arr1] // -> [] -> #45


// ####################
// Глубокое копирование
const obj1 = {
    title: "text",
    numbers: [1, 2, 3, 4]
}

const obj2 = {...obj1} // Поверхностное копирование. В свойство obj2.numbers скопирована ссылка obj1.numbers на массив
console.log(obj1.numbers === obj2.numbers);

const obj3 = {...obj1, numbers: [...obj1.numbers]} // Глубокое копирование. В свойство obj2.numbers записывается ссылка
                                                   // на новую область памяти с скопированным объектом из области памяти,
                                                   // доступной по ссылке obj1.numbers
console.log(obj1.numbers === obj3.numbers);

// ################################
// Деструктуризирующее присваивание

function func1(a, b) {
    return [a, b] // чтобы вернуть сразу несколько переменных из функции, можно положить их в массив
}
arr = func1(1,2)

// Классический способ
// const с = arr[0]
// const d = arr[1]

// Присваивание с помощью деструктуризации
const [c, d] = arr